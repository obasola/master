/*
 * Created on 24 Oct 2015 ( Time 23:20:17 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.kumasi.journal.domain.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "Book"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="Book", catalog="Journal" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="BookEntity.countAll", query="SELECT COUNT(x) FROM BookEntity x" )
} )
public class BookEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="isbn", nullable=false, length=20)
    private String     isbn         ;

    @Column(name="title", nullable=false, length=75)
    private String     title        ;

    @Column(name="subtitle", length=250)
    private String     subtitle     ;

    @Column(name="abstract_description", length=255)
    private String     abstractDescription ;

    @Column(name="number_pages")
    private Integer    numberPages  ;

    @Column(name="author", length=45)
    private String     author       ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToMany(targetEntity=PublisherEntity.class)
    @JoinTable(name="Book_Publisher", 
      joinColumns=@JoinColumn(name="Book_id", referencedColumnName="id"),
      inverseJoinColumns=@JoinColumn(name="Publisher_id", referencedColumnName="id")
     ) 

    private List<PublisherEntity> listOfPublisher;

    @ManyToMany(targetEntity=CategoryEntity.class)
    @JoinTable(name="Book_Category", 
      joinColumns=@JoinColumn(name="Book_id", referencedColumnName="id"),
      inverseJoinColumns=@JoinColumn(name="Category_id", referencedColumnName="id")
     ) 

    private List<CategoryEntity> listOfCategory;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public BookEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : isbn ( VARCHAR ) 
    public void setIsbn( String isbn ) {
        this.isbn = isbn;
    }
    public String getIsbn() {
        return this.isbn;
    }

    //--- DATABASE MAPPING : title ( VARCHAR ) 
    public void setTitle( String title ) {
        this.title = title;
    }
    public String getTitle() {
        return this.title;
    }

    //--- DATABASE MAPPING : subtitle ( VARCHAR ) 
    public void setSubtitle( String subtitle ) {
        this.subtitle = subtitle;
    }
    public String getSubtitle() {
        return this.subtitle;
    }

    //--- DATABASE MAPPING : abstract_description ( TINYTEXT ) 
    public void setAbstractDescription( String abstractDescription ) {
        this.abstractDescription = abstractDescription;
    }
    public String getAbstractDescription() {
        return this.abstractDescription;
    }

    //--- DATABASE MAPPING : number_pages ( INT ) 
    public void setNumberPages( Integer numberPages ) {
        this.numberPages = numberPages;
    }
    public Integer getNumberPages() {
        return this.numberPages;
    }

    //--- DATABASE MAPPING : author ( VARCHAR ) 
    public void setAuthor( String author ) {
        this.author = author;
    }
    public String getAuthor() {
        return this.author;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfPublisher( List<PublisherEntity> listOfPublisher ) {
        this.listOfPublisher = listOfPublisher;
    }
    public List<PublisherEntity> getListOfPublisher() {
        return this.listOfPublisher;
    }

    public void setListOfCategory( List<CategoryEntity> listOfCategory ) {
        this.listOfCategory = listOfCategory;
    }
    public List<CategoryEntity> getListOfCategory() {
        return this.listOfCategory;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(isbn);
        sb.append("|");
        sb.append(title);
        sb.append("|");
        sb.append(subtitle);
        sb.append("|");
        sb.append(abstractDescription);
        sb.append("|");
        sb.append(numberPages);
        sb.append("|");
        sb.append(author);
        return sb.toString(); 
    } 

}
