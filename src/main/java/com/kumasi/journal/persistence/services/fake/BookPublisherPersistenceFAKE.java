/*
 * Created on 24 Oct 2015 ( Time 23:20:17 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.journal.persistence.services.fake;

import java.util.List;
import java.util.Map;

import com.kumasi.journal.domain.jpa.BookPublisherEntity;
import com.kumasi.journal.persistence.commons.fake.GenericFakeService;
import com.kumasi.journal.persistence.services.BookPublisherPersistence;

/**
 * Fake persistence service implementation ( entity "BookPublisher" )
 *
 * @author Telosys Tools Generator
 */
public class BookPublisherPersistenceFAKE extends GenericFakeService<BookPublisherEntity> implements BookPublisherPersistence {

	public BookPublisherPersistenceFAKE () {
		super(BookPublisherEntity.class);
	}
	
	protected BookPublisherEntity buildEntity(int index) {
		BookPublisherEntity entity = new BookPublisherEntity();
		// Init fields with mock values
		entity.setPublisherId( nextInteger() ) ;
		entity.setBookId( nextInteger() ) ;
		return entity ;
	}
	
	
	public boolean delete(BookPublisherEntity entity) {
		log("delete ( BookPublisherEntity : " + entity + ")" ) ;
		return true;
	}

	public boolean delete( Integer publisherId, Integer bookId ) {
		log("delete ( PK )") ;
		return true;
	}

	public void insert(BookPublisherEntity entity) {
		log("insert ( BookPublisherEntity : " + entity + ")" ) ;
	}

	public BookPublisherEntity load( Integer publisherId, Integer bookId ) {
		log("load ( PK )") ;
		return buildEntity(1) ; 
	}

	public List<BookPublisherEntity> loadAll() {
		log("loadAll()") ;
		return buildList(40) ;
	}

	public List<BookPublisherEntity> loadByNamedQuery(String queryName) {
		log("loadByNamedQuery ( '" + queryName + "' )") ;
		return buildList(20) ;
	}

	public List<BookPublisherEntity> loadByNamedQuery(String queryName, Map<String, Object> queryParameters) {
		log("loadByNamedQuery ( '" + queryName + "', parameters )") ;
		return buildList(10) ;
	}

	public BookPublisherEntity save(BookPublisherEntity entity) {
		log("insert ( BookPublisherEntity : " + entity + ")" ) ;
		return entity;
	}

	public List<BookPublisherEntity> search(Map<String, Object> criteria) {
		log("search (criteria)" ) ;
		return buildList(15) ;
	}

	@Override
	public long countAll() {
		return 0 ;
	}

}
