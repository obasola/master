/*
 * Created on 24 Oct 2015 ( Time 23:20:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.journal.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.journal.domain.Entry;
import com.kumasi.journal.domain.jpa.EntryEntity;
import java.util.Date;
import com.kumasi.journal.business.service.EntryService;
import com.kumasi.journal.business.service.mapping.EntryServiceMapper;
import com.kumasi.journal.persistence.PersistenceServiceProvider;
import com.kumasi.journal.persistence.services.EntryPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of EntryService
 */
@Component
public class EntryServiceImpl implements EntryService {

	private EntryPersistence entryPersistence;

	@Resource
	private EntryServiceMapper entryServiceMapper;
	
	public EntryServiceImpl() {
		entryPersistence = PersistenceServiceProvider.getService(EntryPersistence.class);
	}
		
	@Override
	public Entry findById(Integer identry) {
		EntryEntity entity = entryPersistence.load(identry);
		return entryServiceMapper.mapEntryEntityToEntry(entity);
	}

	@Override
	public List<Entry> findAll() {
		List<EntryEntity> entities = entryPersistence.loadAll();
		List<Entry> beans = new ArrayList<Entry>();
		for(EntryEntity entity : entities) {
			beans.add(entryServiceMapper.mapEntryEntityToEntry(entity));
		}
		return beans;
	}

	@Override
	public Entry save(Entry entry) {
		return update(entry) ;
	}

	@Override
	public Entry create(Entry entry) {
		if(entryPersistence.load(entry.getIdentry()) != null) {
			throw new IllegalStateException("already.exists");
		}
		EntryEntity entryEntity = new EntryEntity();
		entryServiceMapper.mapEntryToEntryEntity(entry, entryEntity);
		EntryEntity entryEntitySaved = entryPersistence.save(entryEntity);
		return entryServiceMapper.mapEntryEntityToEntry(entryEntitySaved);
	}

	@Override
	public Entry update(Entry entry) {
		EntryEntity entryEntity = entryPersistence.load(entry.getIdentry());
		entryServiceMapper.mapEntryToEntryEntity(entry, entryEntity);
		EntryEntity entryEntitySaved = entryPersistence.save(entryEntity);
		return entryServiceMapper.mapEntryEntityToEntry(entryEntitySaved);
	}

	@Override
	public void delete(Integer identry) {
		entryPersistence.delete(identry);
	}

	public EntryPersistence getEntryPersistence() {
		return entryPersistence;
	}

	public void setEntryPersistence(EntryPersistence entryPersistence) {
		this.entryPersistence = entryPersistence;
	}

	public EntryServiceMapper getEntryServiceMapper() {
		return entryServiceMapper;
	}

	public void setEntryServiceMapper(EntryServiceMapper entryServiceMapper) {
		this.entryServiceMapper = entryServiceMapper;
	}

}
