/*
 * Created on 24 Oct 2015 ( Time 23:20:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.journal.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.journal.domain.BookPublisher;
import com.kumasi.journal.domain.jpa.BookPublisherEntity;
import com.kumasi.journal.domain.jpa.BookPublisherEntityKey;
import com.kumasi.journal.business.service.BookPublisherService;
import com.kumasi.journal.business.service.mapping.BookPublisherServiceMapper;
import com.kumasi.journal.persistence.PersistenceServiceProvider;
import com.kumasi.journal.persistence.services.BookPublisherPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of BookPublisherService
 */
@Component
public class BookPublisherServiceImpl implements BookPublisherService {

	private BookPublisherPersistence bookPublisherPersistence;

	@Resource
	private BookPublisherServiceMapper bookPublisherServiceMapper;
	
	public BookPublisherServiceImpl() {
		bookPublisherPersistence = PersistenceServiceProvider.getService(BookPublisherPersistence.class);
	}
		
	@Override
	public BookPublisher findById(Integer publisherId, Integer bookId) {
		BookPublisherEntity entity = bookPublisherPersistence.load(publisherId, bookId);
		return bookPublisherServiceMapper.mapBookPublisherEntityToBookPublisher(entity);
	}

	@Override
	public List<BookPublisher> findAll() {
		List<BookPublisherEntity> entities = bookPublisherPersistence.loadAll();
		List<BookPublisher> beans = new ArrayList<BookPublisher>();
		for(BookPublisherEntity entity : entities) {
			beans.add(bookPublisherServiceMapper.mapBookPublisherEntityToBookPublisher(entity));
		}
		return beans;
	}

	@Override
	public BookPublisher save(BookPublisher bookPublisher) {
		return update(bookPublisher) ;
	}

	@Override
	public BookPublisher create(BookPublisher bookPublisher) {
		if(bookPublisherPersistence.load(bookPublisher.getPublisherId(), bookPublisher.getBookId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		BookPublisherEntity bookPublisherEntity = new BookPublisherEntity();
		bookPublisherServiceMapper.mapBookPublisherToBookPublisherEntity(bookPublisher, bookPublisherEntity);
		BookPublisherEntity bookPublisherEntitySaved = bookPublisherPersistence.save(bookPublisherEntity);
		return bookPublisherServiceMapper.mapBookPublisherEntityToBookPublisher(bookPublisherEntitySaved);
	}

	@Override
	public BookPublisher update(BookPublisher bookPublisher) {
		BookPublisherEntity bookPublisherEntity = bookPublisherPersistence.load(bookPublisher.getPublisherId(), bookPublisher.getBookId());
		bookPublisherServiceMapper.mapBookPublisherToBookPublisherEntity(bookPublisher, bookPublisherEntity);
		BookPublisherEntity bookPublisherEntitySaved = bookPublisherPersistence.save(bookPublisherEntity);
		return bookPublisherServiceMapper.mapBookPublisherEntityToBookPublisher(bookPublisherEntitySaved);
	}

	@Override
	public void delete(Integer publisherId, Integer bookId) {
		bookPublisherPersistence.delete(publisherId, bookId);
	}

	public BookPublisherPersistence getBookPublisherPersistence() {
		return bookPublisherPersistence;
	}

	public void setBookPublisherPersistence(BookPublisherPersistence bookPublisherPersistence) {
		this.bookPublisherPersistence = bookPublisherPersistence;
	}

	public BookPublisherServiceMapper getBookPublisherServiceMapper() {
		return bookPublisherServiceMapper;
	}

	public void setBookPublisherServiceMapper(BookPublisherServiceMapper bookPublisherServiceMapper) {
		this.bookPublisherServiceMapper = bookPublisherServiceMapper;
	}

}
