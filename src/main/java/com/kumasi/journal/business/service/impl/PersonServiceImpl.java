/*
 * Created on 24 Oct 2015 ( Time 23:20:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.journal.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.journal.domain.Person;
import com.kumasi.journal.domain.jpa.PersonEntity;
import com.kumasi.journal.business.service.PersonService;
import com.kumasi.journal.business.service.mapping.PersonServiceMapper;
import com.kumasi.journal.persistence.PersistenceServiceProvider;
import com.kumasi.journal.persistence.services.PersonPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of PersonService
 */
@Component
public class PersonServiceImpl implements PersonService {

	private PersonPersistence personPersistence;

	@Resource
	private PersonServiceMapper personServiceMapper;
	
	public PersonServiceImpl() {
		personPersistence = PersistenceServiceProvider.getService(PersonPersistence.class);
	}
		
	@Override
	public Person findById(Integer idperson) {
		PersonEntity entity = personPersistence.load(idperson);
		return personServiceMapper.mapPersonEntityToPerson(entity);
	}

	@Override
	public List<Person> findAll() {
		List<PersonEntity> entities = personPersistence.loadAll();
		List<Person> beans = new ArrayList<Person>();
		for(PersonEntity entity : entities) {
			beans.add(personServiceMapper.mapPersonEntityToPerson(entity));
		}
		return beans;
	}

	@Override
	public Person save(Person person) {
		return update(person) ;
	}

	@Override
	public Person create(Person person) {
		if(personPersistence.load(person.getIdperson()) != null) {
			throw new IllegalStateException("already.exists");
		}
		PersonEntity personEntity = new PersonEntity();
		personServiceMapper.mapPersonToPersonEntity(person, personEntity);
		PersonEntity personEntitySaved = personPersistence.save(personEntity);
		return personServiceMapper.mapPersonEntityToPerson(personEntitySaved);
	}

	@Override
	public Person update(Person person) {
		PersonEntity personEntity = personPersistence.load(person.getIdperson());
		personServiceMapper.mapPersonToPersonEntity(person, personEntity);
		PersonEntity personEntitySaved = personPersistence.save(personEntity);
		return personServiceMapper.mapPersonEntityToPerson(personEntitySaved);
	}

	@Override
	public void delete(Integer idperson) {
		personPersistence.delete(idperson);
	}

	public PersonPersistence getPersonPersistence() {
		return personPersistence;
	}

	public void setPersonPersistence(PersonPersistence personPersistence) {
		this.personPersistence = personPersistence;
	}

	public PersonServiceMapper getPersonServiceMapper() {
		return personServiceMapper;
	}

	public void setPersonServiceMapper(PersonServiceMapper personServiceMapper) {
		this.personServiceMapper = personServiceMapper;
	}

}
