/*
 * Created on 24 Oct 2015 ( Time 23:20:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.journal.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.journal.domain.Category;
import com.kumasi.journal.domain.jpa.CategoryEntity;
import java.util.List;
import com.kumasi.journal.business.service.CategoryService;
import com.kumasi.journal.business.service.mapping.CategoryServiceMapper;
import com.kumasi.journal.persistence.PersistenceServiceProvider;
import com.kumasi.journal.persistence.services.CategoryPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of CategoryService
 */
@Component
public class CategoryServiceImpl implements CategoryService {

	private CategoryPersistence categoryPersistence;

	@Resource
	private CategoryServiceMapper categoryServiceMapper;
	
	public CategoryServiceImpl() {
		categoryPersistence = PersistenceServiceProvider.getService(CategoryPersistence.class);
	}
		
	@Override
	public Category findById(Integer id) {
		CategoryEntity entity = categoryPersistence.load(id);
		return categoryServiceMapper.mapCategoryEntityToCategory(entity);
	}

	@Override
	public List<Category> findAll() {
		List<CategoryEntity> entities = categoryPersistence.loadAll();
		List<Category> beans = new ArrayList<Category>();
		for(CategoryEntity entity : entities) {
			beans.add(categoryServiceMapper.mapCategoryEntityToCategory(entity));
		}
		return beans;
	}

	@Override
	public Category save(Category category) {
		return update(category) ;
	}

	@Override
	public Category create(Category category) {
		if(categoryPersistence.load(category.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		CategoryEntity categoryEntity = new CategoryEntity();
		categoryServiceMapper.mapCategoryToCategoryEntity(category, categoryEntity);
		CategoryEntity categoryEntitySaved = categoryPersistence.save(categoryEntity);
		return categoryServiceMapper.mapCategoryEntityToCategory(categoryEntitySaved);
	}

	@Override
	public Category update(Category category) {
		CategoryEntity categoryEntity = categoryPersistence.load(category.getId());
		categoryServiceMapper.mapCategoryToCategoryEntity(category, categoryEntity);
		CategoryEntity categoryEntitySaved = categoryPersistence.save(categoryEntity);
		return categoryServiceMapper.mapCategoryEntityToCategory(categoryEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		categoryPersistence.delete(id);
	}

	public CategoryPersistence getCategoryPersistence() {
		return categoryPersistence;
	}

	public void setCategoryPersistence(CategoryPersistence categoryPersistence) {
		this.categoryPersistence = categoryPersistence;
	}

	public CategoryServiceMapper getCategoryServiceMapper() {
		return categoryServiceMapper;
	}

	public void setCategoryServiceMapper(CategoryServiceMapper categoryServiceMapper) {
		this.categoryServiceMapper = categoryServiceMapper;
	}

}
