/*
 * Created on 24 Oct 2015 ( Time 23:20:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.journal.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.kumasi.journal.domain.Entrytype;
import com.kumasi.journal.domain.jpa.EntrytypeEntity;
import java.util.List;
import com.kumasi.journal.business.service.EntrytypeService;
import com.kumasi.journal.business.service.mapping.EntrytypeServiceMapper;
import com.kumasi.journal.persistence.PersistenceServiceProvider;
import com.kumasi.journal.persistence.services.EntrytypePersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of EntrytypeService
 */
@Component
public class EntrytypeServiceImpl implements EntrytypeService {

	private EntrytypePersistence entrytypePersistence;

	@Resource
	private EntrytypeServiceMapper entrytypeServiceMapper;
	
	public EntrytypeServiceImpl() {
		entrytypePersistence = PersistenceServiceProvider.getService(EntrytypePersistence.class);
	}
		
	@Override
	public Entrytype findById(Integer id) {
		EntrytypeEntity entity = entrytypePersistence.load(id);
		return entrytypeServiceMapper.mapEntrytypeEntityToEntrytype(entity);
	}

	@Override
	public List<Entrytype> findAll() {
		List<EntrytypeEntity> entities = entrytypePersistence.loadAll();
		List<Entrytype> beans = new ArrayList<Entrytype>();
		for(EntrytypeEntity entity : entities) {
			beans.add(entrytypeServiceMapper.mapEntrytypeEntityToEntrytype(entity));
		}
		return beans;
	}

	@Override
	public Entrytype save(Entrytype entrytype) {
		return update(entrytype) ;
	}

	@Override
	public Entrytype create(Entrytype entrytype) {
		if(entrytypePersistence.load(entrytype.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		EntrytypeEntity entrytypeEntity = new EntrytypeEntity();
		entrytypeServiceMapper.mapEntrytypeToEntrytypeEntity(entrytype, entrytypeEntity);
		EntrytypeEntity entrytypeEntitySaved = entrytypePersistence.save(entrytypeEntity);
		return entrytypeServiceMapper.mapEntrytypeEntityToEntrytype(entrytypeEntitySaved);
	}

	@Override
	public Entrytype update(Entrytype entrytype) {
		EntrytypeEntity entrytypeEntity = entrytypePersistence.load(entrytype.getId());
		entrytypeServiceMapper.mapEntrytypeToEntrytypeEntity(entrytype, entrytypeEntity);
		EntrytypeEntity entrytypeEntitySaved = entrytypePersistence.save(entrytypeEntity);
		return entrytypeServiceMapper.mapEntrytypeEntityToEntrytype(entrytypeEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		entrytypePersistence.delete(id);
	}

	public EntrytypePersistence getEntrytypePersistence() {
		return entrytypePersistence;
	}

	public void setEntrytypePersistence(EntrytypePersistence entrytypePersistence) {
		this.entrytypePersistence = entrytypePersistence;
	}

	public EntrytypeServiceMapper getEntrytypeServiceMapper() {
		return entrytypeServiceMapper;
	}

	public void setEntrytypeServiceMapper(EntrytypeServiceMapper entrytypeServiceMapper) {
		this.entrytypeServiceMapper = entrytypeServiceMapper;
	}

}
