/*
 * Created on 24 Oct 2015 ( Time 23:23:57 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.journal.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import com.kumasi.journal.domain.Person;
import com.kumasi.journal.business.service.PersonService;
import com.kumasi.journal.web.listitem.PersonListItem;

/**
 * Spring MVC controller for 'Person' management.
 */
@Controller
public class PersonRestController {

	@Resource
	private PersonService personService;
	
	@RequestMapping( value="/items/person",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<PersonListItem> findAllAsListItems() {
		List<Person> list = personService.findAll();
		List<PersonListItem> items = new LinkedList<PersonListItem>();
		for ( Person person : list ) {
			items.add(new PersonListItem( person ) );
		}
		return items;
	}
	
	@RequestMapping( value="/person",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Person> findAll() {
		return personService.findAll();
	}

	@RequestMapping( value="/person/{idperson}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Person findOne(@PathVariable("idperson") Integer idperson) {
		return personService.findById(idperson);
	}
	
	@RequestMapping( value="/person",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Person create(@RequestBody Person person) {
		return personService.create(person);
	}

	@RequestMapping( value="/person/{idperson}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Person update(@PathVariable("idperson") Integer idperson, @RequestBody Person person) {
		return personService.update(person);
	}

	@RequestMapping( value="/person/{idperson}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("idperson") Integer idperson) {
		personService.delete(idperson);
	}
	
}
