/*
 * Created on 24 Oct 2015 ( Time 23:23:56 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.journal.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import com.kumasi.journal.domain.BookPublisher;
import com.kumasi.journal.business.service.BookPublisherService;
import com.kumasi.journal.web.listitem.BookPublisherListItem;

/**
 * Spring MVC controller for 'BookPublisher' management.
 */
@Controller
public class BookPublisherRestController {

	@Resource
	private BookPublisherService bookPublisherService;
	
	@RequestMapping( value="/items/bookPublisher",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<BookPublisherListItem> findAllAsListItems() {
		List<BookPublisher> list = bookPublisherService.findAll();
		List<BookPublisherListItem> items = new LinkedList<BookPublisherListItem>();
		for ( BookPublisher bookPublisher : list ) {
			items.add(new BookPublisherListItem( bookPublisher ) );
		}
		return items;
	}
	
	@RequestMapping( value="/bookPublisher",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<BookPublisher> findAll() {
		return bookPublisherService.findAll();
	}

	@RequestMapping( value="/bookPublisher/{publisherId}/{bookId}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public BookPublisher findOne(@PathVariable("publisherId") Integer publisherId, @PathVariable("bookId") Integer bookId) {
		return bookPublisherService.findById(publisherId, bookId);
	}
	
	@RequestMapping( value="/bookPublisher",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public BookPublisher create(@RequestBody BookPublisher bookPublisher) {
		return bookPublisherService.create(bookPublisher);
	}

	@RequestMapping( value="/bookPublisher/{publisherId}/{bookId}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public BookPublisher update(@PathVariable("publisherId") Integer publisherId, @PathVariable("bookId") Integer bookId, @RequestBody BookPublisher bookPublisher) {
		return bookPublisherService.update(bookPublisher);
	}

	@RequestMapping( value="/bookPublisher/{publisherId}/{bookId}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("publisherId") Integer publisherId, @PathVariable("bookId") Integer bookId) {
		bookPublisherService.delete(publisherId, bookId);
	}
	
}
