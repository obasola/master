/*
 * Created on 24 Oct 2015 ( Time 23:20:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.journal.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.journal.domain.Entrytype;
import com.kumasi.journal.domain.jpa.EntrytypeEntity;
import java.util.List;
import com.kumasi.journal.business.service.mapping.EntrytypeServiceMapper;
import com.kumasi.journal.persistence.services.jpa.EntrytypePersistenceJPA;
import com.kumasi.journal.test.EntrytypeFactoryForTest;
import com.kumasi.journal.test.EntrytypeEntityFactoryForTest;
import com.kumasi.journal.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of EntrytypeService
 */
@RunWith(MockitoJUnitRunner.class)
public class EntrytypeServiceImplTest {

	@InjectMocks
	private EntrytypeServiceImpl entrytypeService;
	@Mock
	private EntrytypePersistenceJPA entrytypePersistenceJPA;
	@Mock
	private EntrytypeServiceMapper entrytypeServiceMapper;
	
	private EntrytypeFactoryForTest entrytypeFactoryForTest = new EntrytypeFactoryForTest();

	private EntrytypeEntityFactoryForTest entrytypeEntityFactoryForTest = new EntrytypeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		EntrytypeEntity entrytypeEntity = entrytypePersistenceJPA.load(id);
		
		Entrytype entrytype = entrytypeFactoryForTest.newEntrytype();
		when(entrytypeServiceMapper.mapEntrytypeEntityToEntrytype(entrytypeEntity)).thenReturn(entrytype);

		// When
		Entrytype entrytypeFound = entrytypeService.findById(id);

		// Then
		assertEquals(entrytype.getId(),entrytypeFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<EntrytypeEntity> entrytypeEntitys = new ArrayList<EntrytypeEntity>();
		EntrytypeEntity entrytypeEntity1 = entrytypeEntityFactoryForTest.newEntrytypeEntity();
		entrytypeEntitys.add(entrytypeEntity1);
		EntrytypeEntity entrytypeEntity2 = entrytypeEntityFactoryForTest.newEntrytypeEntity();
		entrytypeEntitys.add(entrytypeEntity2);
		when(entrytypePersistenceJPA.loadAll()).thenReturn(entrytypeEntitys);
		
		Entrytype entrytype1 = entrytypeFactoryForTest.newEntrytype();
		when(entrytypeServiceMapper.mapEntrytypeEntityToEntrytype(entrytypeEntity1)).thenReturn(entrytype1);
		Entrytype entrytype2 = entrytypeFactoryForTest.newEntrytype();
		when(entrytypeServiceMapper.mapEntrytypeEntityToEntrytype(entrytypeEntity2)).thenReturn(entrytype2);

		// When
		List<Entrytype> entrytypesFounds = entrytypeService.findAll();

		// Then
		assertTrue(entrytype1 == entrytypesFounds.get(0));
		assertTrue(entrytype2 == entrytypesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Entrytype entrytype = entrytypeFactoryForTest.newEntrytype();

		EntrytypeEntity entrytypeEntity = entrytypeEntityFactoryForTest.newEntrytypeEntity();
		when(entrytypePersistenceJPA.load(entrytype.getId())).thenReturn(null);
		
		entrytypeEntity = new EntrytypeEntity();
		entrytypeServiceMapper.mapEntrytypeToEntrytypeEntity(entrytype, entrytypeEntity);
		EntrytypeEntity entrytypeEntitySaved = entrytypePersistenceJPA.save(entrytypeEntity);
		
		Entrytype entrytypeSaved = entrytypeFactoryForTest.newEntrytype();
		when(entrytypeServiceMapper.mapEntrytypeEntityToEntrytype(entrytypeEntitySaved)).thenReturn(entrytypeSaved);

		// When
		Entrytype entrytypeResult = entrytypeService.create(entrytype);

		// Then
		assertTrue(entrytypeResult == entrytypeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Entrytype entrytype = entrytypeFactoryForTest.newEntrytype();

		EntrytypeEntity entrytypeEntity = entrytypeEntityFactoryForTest.newEntrytypeEntity();
		when(entrytypePersistenceJPA.load(entrytype.getId())).thenReturn(entrytypeEntity);

		// When
		Exception exception = null;
		try {
			entrytypeService.create(entrytype);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Entrytype entrytype = entrytypeFactoryForTest.newEntrytype();

		EntrytypeEntity entrytypeEntity = entrytypeEntityFactoryForTest.newEntrytypeEntity();
		when(entrytypePersistenceJPA.load(entrytype.getId())).thenReturn(entrytypeEntity);
		
		EntrytypeEntity entrytypeEntitySaved = entrytypeEntityFactoryForTest.newEntrytypeEntity();
		when(entrytypePersistenceJPA.save(entrytypeEntity)).thenReturn(entrytypeEntitySaved);
		
		Entrytype entrytypeSaved = entrytypeFactoryForTest.newEntrytype();
		when(entrytypeServiceMapper.mapEntrytypeEntityToEntrytype(entrytypeEntitySaved)).thenReturn(entrytypeSaved);

		// When
		Entrytype entrytypeResult = entrytypeService.update(entrytype);

		// Then
		verify(entrytypeServiceMapper).mapEntrytypeToEntrytypeEntity(entrytype, entrytypeEntity);
		assertTrue(entrytypeResult == entrytypeSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		entrytypeService.delete(id);

		// Then
		verify(entrytypePersistenceJPA).delete(id);
		
	}

}
