/*
 * Created on 24 Oct 2015 ( Time 23:20:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.journal.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.journal.domain.BookCategory;
import com.kumasi.journal.domain.jpa.BookCategoryEntity;
import com.kumasi.journal.domain.jpa.BookCategoryEntityKey;
import com.kumasi.journal.business.service.mapping.BookCategoryServiceMapper;
import com.kumasi.journal.persistence.services.jpa.BookCategoryPersistenceJPA;
import com.kumasi.journal.test.BookCategoryFactoryForTest;
import com.kumasi.journal.test.BookCategoryEntityFactoryForTest;
import com.kumasi.journal.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of BookCategoryService
 */
@RunWith(MockitoJUnitRunner.class)
public class BookCategoryServiceImplTest {

	@InjectMocks
	private BookCategoryServiceImpl bookCategoryService;
	@Mock
	private BookCategoryPersistenceJPA bookCategoryPersistenceJPA;
	@Mock
	private BookCategoryServiceMapper bookCategoryServiceMapper;
	
	private BookCategoryFactoryForTest bookCategoryFactoryForTest = new BookCategoryFactoryForTest();

	private BookCategoryEntityFactoryForTest bookCategoryEntityFactoryForTest = new BookCategoryEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer bookId = mockValues.nextInteger();
		Integer categoryId = mockValues.nextInteger();
		
		BookCategoryEntityKey bookCategoryEntityKey = new BookCategoryEntityKey(bookId, categoryId);
		bookCategoryEntityKey.setBookId(bookId);
		bookCategoryEntityKey.setCategoryId(categoryId);
		
		BookCategoryEntity bookCategoryEntity = bookCategoryPersistenceJPA.load(bookCategoryEntityKey);
		
		BookCategory bookCategory = bookCategoryFactoryForTest.newBookCategory();
		when(bookCategoryServiceMapper.mapBookCategoryEntityToBookCategory(bookCategoryEntity)).thenReturn(bookCategory);

		// When
		BookCategory bookCategoryFound = bookCategoryService.findById(bookId, categoryId);

		// Then
		assertEquals(bookCategory.getBookId(),bookCategoryFound.getBookId());
		assertEquals(bookCategory.getCategoryId(),bookCategoryFound.getCategoryId());
	}

	@Test
	public void findAll() {
		// Given
		List<BookCategoryEntity> bookCategoryEntitys = new ArrayList<BookCategoryEntity>();
		BookCategoryEntity bookCategoryEntity1 = bookCategoryEntityFactoryForTest.newBookCategoryEntity();
		bookCategoryEntitys.add(bookCategoryEntity1);
		BookCategoryEntity bookCategoryEntity2 = bookCategoryEntityFactoryForTest.newBookCategoryEntity();
		bookCategoryEntitys.add(bookCategoryEntity2);
		when(bookCategoryPersistenceJPA.loadAll()).thenReturn(bookCategoryEntitys);
		
		BookCategory bookCategory1 = bookCategoryFactoryForTest.newBookCategory();
		when(bookCategoryServiceMapper.mapBookCategoryEntityToBookCategory(bookCategoryEntity1)).thenReturn(bookCategory1);
		BookCategory bookCategory2 = bookCategoryFactoryForTest.newBookCategory();
		when(bookCategoryServiceMapper.mapBookCategoryEntityToBookCategory(bookCategoryEntity2)).thenReturn(bookCategory2);

		// When
		List<BookCategory> bookCategorysFounds = bookCategoryService.findAll();

		// Then
		assertTrue(bookCategory1 == bookCategorysFounds.get(0));
		assertTrue(bookCategory2 == bookCategorysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		BookCategory bookCategory = bookCategoryFactoryForTest.newBookCategory();

		BookCategoryEntity bookCategoryEntity = bookCategoryEntityFactoryForTest.newBookCategoryEntity();
		when(bookCategoryPersistenceJPA.load(bookCategory.getBookId(), bookCategory.getCategoryId())).thenReturn(null);
		
		bookCategoryEntity = new BookCategoryEntity();
		bookCategoryServiceMapper.mapBookCategoryToBookCategoryEntity(bookCategory, bookCategoryEntity);
		BookCategoryEntity bookCategoryEntitySaved = bookCategoryPersistenceJPA.save(bookCategoryEntity);
		
		BookCategory bookCategorySaved = bookCategoryFactoryForTest.newBookCategory();
		when(bookCategoryServiceMapper.mapBookCategoryEntityToBookCategory(bookCategoryEntitySaved)).thenReturn(bookCategorySaved);

		// When
		BookCategory bookCategoryResult = bookCategoryService.create(bookCategory);

		// Then
		assertTrue(bookCategoryResult == bookCategorySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		BookCategory bookCategory = bookCategoryFactoryForTest.newBookCategory();

		BookCategoryEntity bookCategoryEntity = bookCategoryEntityFactoryForTest.newBookCategoryEntity();
		when(bookCategoryPersistenceJPA.load(bookCategory.getBookId(), bookCategory.getCategoryId())).thenReturn(bookCategoryEntity);

		// When
		Exception exception = null;
		try {
			bookCategoryService.create(bookCategory);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		BookCategory bookCategory = bookCategoryFactoryForTest.newBookCategory();

		BookCategoryEntity bookCategoryEntity = bookCategoryEntityFactoryForTest.newBookCategoryEntity();
		when(bookCategoryPersistenceJPA.load(bookCategory.getBookId(), bookCategory.getCategoryId())).thenReturn(bookCategoryEntity);
		
		BookCategoryEntity bookCategoryEntitySaved = bookCategoryEntityFactoryForTest.newBookCategoryEntity();
		when(bookCategoryPersistenceJPA.save(bookCategoryEntity)).thenReturn(bookCategoryEntitySaved);
		
		BookCategory bookCategorySaved = bookCategoryFactoryForTest.newBookCategory();
		when(bookCategoryServiceMapper.mapBookCategoryEntityToBookCategory(bookCategoryEntitySaved)).thenReturn(bookCategorySaved);

		// When
		BookCategory bookCategoryResult = bookCategoryService.update(bookCategory);

		// Then
		verify(bookCategoryServiceMapper).mapBookCategoryToBookCategoryEntity(bookCategory, bookCategoryEntity);
		assertTrue(bookCategoryResult == bookCategorySaved);
	}

	@Test
	public void delete() {
		// Given
		Integer bookId = mockValues.nextInteger();
		Integer categoryId = mockValues.nextInteger();

		// When
		bookCategoryService.delete(bookId, categoryId);

		// Then
		verify(bookCategoryPersistenceJPA).delete(bookId, categoryId);
		
	}

}
