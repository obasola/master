/*
 * Created on 24 Oct 2015 ( Time 23:20:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.kumasi.journal.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.kumasi.journal.domain.Book;
import com.kumasi.journal.domain.jpa.BookEntity;
import java.util.List;
import com.kumasi.journal.business.service.mapping.BookServiceMapper;
import com.kumasi.journal.persistence.services.jpa.BookPersistenceJPA;
import com.kumasi.journal.test.BookFactoryForTest;
import com.kumasi.journal.test.BookEntityFactoryForTest;
import com.kumasi.journal.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of BookService
 */
@RunWith(MockitoJUnitRunner.class)
public class BookServiceImplTest {

	@InjectMocks
	private BookServiceImpl bookService;
	@Mock
	private BookPersistenceJPA bookPersistenceJPA;
	@Mock
	private BookServiceMapper bookServiceMapper;
	
	private BookFactoryForTest bookFactoryForTest = new BookFactoryForTest();

	private BookEntityFactoryForTest bookEntityFactoryForTest = new BookEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		BookEntity bookEntity = bookPersistenceJPA.load(id);
		
		Book book = bookFactoryForTest.newBook();
		when(bookServiceMapper.mapBookEntityToBook(bookEntity)).thenReturn(book);

		// When
		Book bookFound = bookService.findById(id);

		// Then
		assertEquals(book.getId(),bookFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<BookEntity> bookEntitys = new ArrayList<BookEntity>();
		BookEntity bookEntity1 = bookEntityFactoryForTest.newBookEntity();
		bookEntitys.add(bookEntity1);
		BookEntity bookEntity2 = bookEntityFactoryForTest.newBookEntity();
		bookEntitys.add(bookEntity2);
		when(bookPersistenceJPA.loadAll()).thenReturn(bookEntitys);
		
		Book book1 = bookFactoryForTest.newBook();
		when(bookServiceMapper.mapBookEntityToBook(bookEntity1)).thenReturn(book1);
		Book book2 = bookFactoryForTest.newBook();
		when(bookServiceMapper.mapBookEntityToBook(bookEntity2)).thenReturn(book2);

		// When
		List<Book> booksFounds = bookService.findAll();

		// Then
		assertTrue(book1 == booksFounds.get(0));
		assertTrue(book2 == booksFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Book book = bookFactoryForTest.newBook();

		BookEntity bookEntity = bookEntityFactoryForTest.newBookEntity();
		when(bookPersistenceJPA.load(book.getId())).thenReturn(null);
		
		bookEntity = new BookEntity();
		bookServiceMapper.mapBookToBookEntity(book, bookEntity);
		BookEntity bookEntitySaved = bookPersistenceJPA.save(bookEntity);
		
		Book bookSaved = bookFactoryForTest.newBook();
		when(bookServiceMapper.mapBookEntityToBook(bookEntitySaved)).thenReturn(bookSaved);

		// When
		Book bookResult = bookService.create(book);

		// Then
		assertTrue(bookResult == bookSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Book book = bookFactoryForTest.newBook();

		BookEntity bookEntity = bookEntityFactoryForTest.newBookEntity();
		when(bookPersistenceJPA.load(book.getId())).thenReturn(bookEntity);

		// When
		Exception exception = null;
		try {
			bookService.create(book);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Book book = bookFactoryForTest.newBook();

		BookEntity bookEntity = bookEntityFactoryForTest.newBookEntity();
		when(bookPersistenceJPA.load(book.getId())).thenReturn(bookEntity);
		
		BookEntity bookEntitySaved = bookEntityFactoryForTest.newBookEntity();
		when(bookPersistenceJPA.save(bookEntity)).thenReturn(bookEntitySaved);
		
		Book bookSaved = bookFactoryForTest.newBook();
		when(bookServiceMapper.mapBookEntityToBook(bookEntitySaved)).thenReturn(bookSaved);

		// When
		Book bookResult = bookService.update(book);

		// Then
		verify(bookServiceMapper).mapBookToBookEntity(book, bookEntity);
		assertTrue(bookResult == bookSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		bookService.delete(id);

		// Then
		verify(bookPersistenceJPA).delete(id);
		
	}

}
